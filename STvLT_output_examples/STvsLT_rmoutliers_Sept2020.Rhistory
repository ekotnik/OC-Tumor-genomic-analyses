for (i in 1:length(fishes4)){
fish = layoutClones(fishes4[[i]])
fish=setCol(fish, f4$clonevol.clone.colors)
fishPlot(fish, shape = 'spline', title.btm = 'Patient4', cex.title = 0.5, vlines=seq(1,length(samples)),vlab=samples,pad.left=0.5)
}
dev.off()
vaf7 = read.table("Documents/kfuh_lab/xfer/sciclone/007.clonevol", header=TRUE)
vaf.col.names <- grep('.vaf', colnames(vaf7), value=T)
sample.names <- gsub('.vaf', '', vaf.col.names)
vaf7[, sample.names] <- vaf7[, vaf.col.names]
vaf.col.names <- sample.names
sample.groups <- c('P', 'M');
names(sample.groups) <- vaf.col.names
y7 <- infer.clonal.models(variants = vaf7, cluster.col.name = 'cluster', vaf.col.names=vaf.col.names, sample.groups = sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors=clone.colors, min.cluster.vaf = 0.01, sum.p=0.05, alpha=0.05)
y4 <- convert.consensus.tree.clone.to.branch(y4, branch.scale = 'sqrt')
y7 <- convert.consensus.tree.clone.to.branch(y7, branch.scale = 'sqrt')
f7 = generateFishplotInputs(results=y7)
fishes7= createFishPlotObjects(f7)
pdf('Documents/kfuh_lab/patient7_fish.pdf', width=8, height=4)
for (i in 1:length(fishes7)){
fish = layoutClones(fishes7[[i]])
fish = setCol(fish, f7$clonevol.clone.colors)
fishPlot(fish, shape = 'spline', title.btm = 'Patient7', cex.title = 0.5, vlines=seq(1,length(samples)),vlab=samples,pad.left=0.5)
}
dev.off()
vaf9 = read.table("Documents/kfuh_lab/xfer/sciclone/009.clonevol", header=TRUE)
vaf.col.names <- grep('.vaf', colnames(vaf9), value=T)
sample.names <- gsub('.vaf', '', vaf.col.names)
vaf9[, sample.names] <- vaf9[, vaf.col.names]
vaf.col.names <- sample.names
sample.groups <- c('P', 'M');
names(sample.groups) <- vaf.col.names
y9 = infer.clonal.models(variants=vaf9,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y9 = <- convert.consensus.tree.clone.to.branch(y#, branch.scale = 'sqrt')
y9 = <- convert.consensus.tree.clone.to.branch(y9, branch.scale = 'sqrt')
y9 = infer.clonal.models(variants=vaf9,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y9 = <- convert.consensus.tree.clone.to.branch(y9, branch.scale = 'sqrt')
y9 = infer.clonal.models(variants=vaf9,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y9 = <- convert.consensus.tree.clone.to.branch(y9, branch.scale = 'sqrt')
y9 <- convert.consensus.tree.clone.to.branch(y9, branch.scale = 'sqrt')
y9 = infer.clonal.models(variants=vaf9,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y9 <- convert.consensus.tree.clone.to.branch(y9, branch.scale = 'sqrt')
f9 = generateFishplotInputs(results=y9)
fishes9 = createFishPlotObjects(f9)
pdf('Documents/kfuh_lab/patient9_fish.pdf', width=8, height=4)
for (i in 1:length(fishes9)){
fish = layoutClones(fishes9[[i]])
fish=setCol(fish, f9$clonevol.clone.colors)
fishPlot(fish, shape = "spline", title.btm = 'Patient9', cex.title = 0.5, vlines = seq(1,length(+ samples)),vlab = samples, pad.left = 0.5)
}
fishPlot(fish, shape = "spline", title.btm = 'Patient9', cex.title = 0.5, vlines = seq(1,length(samples)),vlab = samples, pad.left = 0.5)
}
fishPlot(fish, shape = "spline", title.btm = 'Patient9', cex.title = 0.5, vlines = seq(1,length(samples)),vlab = samples, pad.left = 0.5)
for (i in 1:length(fishes9)){
fish = layoutClones(fishes9[[i]])
fish=setCol(fish, f9$clonevol.clone.colors)
fishPlot(fish, shape = "spline", title.btm = 'Patient9', cex.title = 0.5, vlines = seq(1,length(samples)),vlab = samples, pad.left = 0.5)
}
dev.off()
samples
fishPlot(fish, shape = "spline", title.btm = 'Patient9', cex.title = 0.5, vlines = seq(1,length(samples)),vlab = samples, pad.left = 0.5)
dev.off()
vaf11 = read.table("Documents/kfuh_lab/xfer/sciclone/011.clonevol", header=TRUE)
vaf.col.names <- grep('.vaf', colnames(vaf11), value=T)
sample.names <- gsub('.vaf', '', vaf.col.names)
vaf11[, sample.names] <- vaf11[, vaf.col.names]
vaf.col.names <- sample.names
sample.groups <- c('P', 'M');
names(sample.groups) <- vaf.col.names
y11 = infer.clonal.models(variants=vafs11, cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y11 = infer.clonal.models(variants=vaf11, cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y11 <- convert.consensus.tree.clone.to.branch(y11, branch.scale = 'sqrt')
f11 = generateFishplotInputs(results=y11)
fishes11 = createFishPlotObjects(f11)
pdf('Documents/kfuh_lab/patient11_fish.pdf', width=8, height=4)
for (i in 1:length(fishes11)){
fish = layoutClones(fishes11[[i]])
fish=setCol(fish, f11$clonevol.clone.colors)
fishPlot(fish, shape = "spline", title.btm = 'Patient42', cex.title = 0.5, vlines = seq(1,length(samples)),vlab = samples, pad.left = 0.5)
}
dev.off()
vaf15 = read.table("Documents/kfuh_lab/xfer/sciclone/015.clonevol", header=TRUE)
View(vaf15)
vaf15 = vaf15[order(vaf15$cluster),]
vaf15 = vaf15[-c(0),]
vaf15 = vaf15[,-c(0)]
vaf15 = read.table("Documents/kfuh_lab/xfer/sciclone/015.clonevol", header=TRUE)
vaf15 = vaf15[,-c(0)]
vaf15 = read.table("Documents/kfuh_lab/xfer/sciclone/015.clonevol", header=TRUE)
vaf15 = vaf15[,-c(1)]
vaf15 = read.table("Documents/kfuh_lab/xfer/sciclone/015.clonevol", header=TRUE)
vaf15 = vaf15[-c(1),]
vaf15 = read.table("Documents/kfuh_lab/xfer/sciclone/015.clonevol", header=TRUE)
vaf15 = vaf15[order(vaf15$cluster),]
vaf15 = vaf15[-c(1),]
vaf.col.names <- grep('.vaf', colnames(vaf15), value=T)
sample.names <- gsub('.vaf', '', vaf.col.names)
vaf15[, sample.names] <- vaf15[, vaf.col.names]
vaf.col.names <- sample.names
sample.groups <- c('P', 'M');
names(sample.groups) <- vaf.col.names
y15 = infer.clonal.models(variants=vaf15,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
vaf19 = read.table("Documents/kfuh_lab/xfer/sciclone/019.clonevol", header=TRUE)
vaf19 = vaf19[order(vaf19$cluster),]
View(vaf19)
vaf27 = read.table("Documents/kfuh_lab/xfer/sciclone/027.clonevol", header=TRUE)
View(vaf27)
vaf27 = vaf19[order(vaf27$cluster),]
vaf27 = vaf27[order(vaf27$cluster),]
vaf27 = read.table("Documents/kfuh_lab/xfer/sciclone/027.clonevol", header=TRUE)
vaf27 = vaf27[order(vaf27$cluster),]
vaf27 = vaf27[-c(1),]
vaf29 = read.table("Documents/kfuh_lab/xfer/sciclone/029.clonevol", header=TRUE)
View(vaf29)
vaf27 = vaf27[order(vaf27$cluster),]
vaf29 = vaf29[order(vaf29$cluster),]
vaf30 = read.table("Documents/kfuh_lab/xfer/sciclone/030.clonevol", header=TRUE)
View(vaf30)
vaf30 = vaf30[order(vaf30$cluster),]
vaf33 = vaf33[order(vaf33$cluster),]
vaf33 = read.table("Documents/kfuh_lab/xfer/sciclone/033.clonevol", header=TRUE)
vaf33 = vaf33[order(vaf33$cluster),]
View(vaf33)
vaf30 = read.table("Documents/kfuh_lab/xfer/sciclone/030.clonevol", header=TRUE)
View(vaf30)
vaf30 = vaf30[,c(1,2,4,3)]
vaf.col.names = grep('.vaf', colnames(vafs), value=T)
vaf.col.names = grep('.vaf', colnames(vaf30), value=T)
sample.names = gsub('.vaf', '', vaf.col.names)
vaf30[, sample.names] = vaf30[, vaf.col.names]
vaf.col.names = sample.names
sample.groups = c('P', 'M', 'R');
names(sample.groups) = vaf.col.names
clone.colors = c('#FF3030', '#FFD700', '#228B22', '#0000FF', '#9400D3', '#68228B', '#FF1493','#00CED1')
y30 = infer.clonal.models(variants=vaf30,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
y30 = infer.clonal.models(variants=vaf30,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05, seeding.aware.tree.pruning = TRUE)
y30 = infer.clonal.models(variants=vaf30,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
vaf30 = read.table("Documents/kfuh_lab/xfer/sciclone/030.clonevol", header=TRUE)
vaf.col.names = grep('.vaf', colnames(vaf30), value=T)
sample.names = gsub('.vaf', '', vaf.col.names)
vaf30[, sample.names] = vaf30[, vaf.col.names]
vaf.col.names = sample.names
sample.groups = c('P', 'M', 'R');
sample.groups = c('P', 'R', 'M');
names(sample.groups) = vaf.col.names
clone.colors = c('#FF3030', '#FFD700', '#228B22', '#0000FF', '#9400D3', '#68228B', '#FF1493','#00CED1')
y30 = infer.clonal.models(variants=vaf30,cluster.col.name='cluster',vaf.col.names = vaf.col.names,sample.groups=sample.groups, cancer.initiation.model = 'monoclonal', subclonal.test = 'bootstrap', subclonal.test.model = 'non-parametric', num.boots=1000, founding.cluster = 1, cluster.center='mean', ignore.clusters = NULL, clone.colors = clone.colors, min.cluster.vaf = 0.01, sum.p = 0.05, alpha = 0.05)
fpkm = read.table("Documents/kfuh_lab/fpkm.matrix.csv", header=TRUE)
View(fpkm)
View(fpkm_matrix)
View(vaf19)
library("clonevol", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("DESeq2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
fpkm_matrix = read.table('Documents/kfuh_lab/fpkm.matrix.csv')
fpkm_matrix = read.table('Documents/kfuh_lab/fpkm.matrix.csv', header = TRUE)
View(fpkm_matrix)
View(fpkm_matrix)
fpkm_matrix = read.table('Documents/kfuh_lab/fpkm.matrix.xlsx', header = TRUE)
View(fpkm_matrix)
View(fpkm_matrix)
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
fpkm_matrix = read.table('Documents/kfuh_lab/fpkm.matrix.xlsx', header = TRUE)
fpkm_matrix = read.xlsx2('Documents/kfuh_lab/fpkm.matrix.xlsx', header = TRUE)
fpkm_matrix = read.xlsx2('Documents/kfuh_lab/fpkm.matrix.xlsx', 1, header = TRUE)
View(fpkm_matrix)
fpkm_matrix = read.table('Documents/kfuh_lab/fpkm.matrix.csv', header = TRUE)
View(fpkm_matrix)
fpkm_matrix = read.csv('Documents/kfuh_lab/fpkm.matrix.csv', header = TRUE)
fpkm_matrix = fpkm_matrix[c(2,5-78)]
fpkm_matrix = fpkm_matrix[c(2,5-78),]
fpkm_matrix = fpkm_matrix[,c(2,5-78)]
fpkm_matrix = fpkm_matrix[,c(2,5:78)]
dds_fkpm = DESeqDataSetFromMatrix(fpkm_matrix)
sciclone4 = read.table('Documents/kfuh_lab/xfer/sciclone/004.cluster', header=TRUE)
View(sciclone4)
View(sciclone4)
clonevol4 = read.table('Documents/kfuh_lab/xfer/sciclone/004.clonevol', header = TRUE)
View(clonevol4)
library(ggplot2)
ggplot(clonevol4, aes(x=X004.tumor.vaf, y=X004.met.vaf)) + geom_point(size=2, shape=23)
if clonevol4$cluster = 1:
for x in clonevol4:
for x in clonevol4
clonevol9 = read.table('Documents/kfuh_lab/xfer/sciclone/009.clonevol', header = TRUE)
View(clonevol9)
clonevol9 = clonevol9[order(clonevol9$cluster),]
ggplot(clonevol9, aes(x=X009.tumor.vaf, y=X009.met.vaf)) + geom_point(size=2, shape=23)
sciclone9 = read.table('Documents/kfuh_lab/xfer/sciclone/009.cluster', header=TRUE)
View(sciclone9)
counts1 = read.table('Documents/transcript-counts.tsv', header=TRUE)
View(counts1)
heatVal_0.01FDR_out <- read.csv("~/Documents/SVA_P_STvLT/heatVal_0.01FDR_out.csv")
View(heatVal_0.01FDR_out)
symbols <- heatVal_0.01FDR_out$ID
library("org.Hs.eg.db")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library("org.Hs.eg.db")
ensembls <- mapIds(org.Hs.eg.db, keys = symbols , keytype="SYMBOL", column="ENSEMBL")
class(symbols)
library(readxl)
GSEA_P_STvLT_p_01 <- read_excel("Documents/SVA_P_STvLT/GSEA_P_STvLT_p.01.xlsx")
View(GSEA_P_STvLT_p_01)
symbols <- GSEA_P_STvLT_p_01$ID
ensembls <- mapIds(org.Hs.eg.db, keys = symbols , keytype="SYMBOL", column="ENSEMBL")
gene_key <- cbind(symbols, ensembls)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_P_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE)
heatVal_0.01FDR_out <- read.csv("~/Documents/SVA_STvLT_rmoutliers/heatVal_0.01FDR_out.csv", stringsAsFactors=FALSE)
View(heatVal_0.01FDR_out)
symbols2 <- heatVal_0.01FDR_out$ID
class(symbols)
ensembls2 <- mapIds(org.Hs.eg.db, keys = symbols2 , keytype="SYMBOL", column="ENSEMBL")
gene_key <- cbind(symbols2, ensembls2)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE, quotes=FALSE)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE, quote = FALSE)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE, quote = FALSE)
symbols <- GSEA_P_STvLT_p_01$ID
ensembls <- mapIds(org.Hs.eg.db, keys = symbols , keytype="SYMBOL", column="ENSEMBL")
gene_key <- cbind(symbols, ensembls)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_P_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
SVA_M_STvLT_heatVal_0.01FDR_out <- read.csv("~/Documents/SVA_M_STvLT/SVA_M_STvLT_heatVal_0.01FDR_out.csv", stringsAsFactors=FALSE)
View(SVA_M_STvLT_heatVal_0.01FDR_out)
symbols <- SVA_M_STvLT_heatVal_0.01FDR_out$ID
ensembls <- mapIds(org.Hs.eg.db, keys = symbols , keytype="SYMBOL", column="ENSEMBL")
gene_key <- cbind(symbols, ensembls)
write.table(gene_key, file="/Users/emileekotnik/Documents/SVA_M_STvLT_genesymbol_ensembl_key.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
source('~/Desktop/emilee_STvsLT.R')
setwd("/Users/emileekotnik/Documents/SVA_STvLT_rmoutliers_Sept2020/")
getwd()
options(stringsAsFactors = FALSE)
library(affycoretools)
library(limma)
library(edgeR)
library(rgl) #can install with BiocManager if you don't have it
library(rtracklayer)
library(sva)
####Sept2020: Had to combine edger rawcount files to include all the samples and outliers removed previously. all_config and all_rawcounts
load("/Users/emileekotnik/Documents/SVA_STvLT_rmoutliers_Sept2020/STvLT_all_Sept2020.RData")
all_rawcounts <- merge(rm1_outliers_rawcounts, rm1_rawcounts, by=0)
rownames(all_rawcounts) <- all_rawcounts$Row.names
all_rawcounts[,1] <-NULL
##config for STvLT
config <- all_config[c(TRUE,TRUE,TRUE,TRUE, TRUE, TRUE,TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE),]
##rawcounts for STvLT
rawcounts2 <- all_rawcounts[,c(TRUE,TRUE,TRUE,TRUE, TRUE, TRUE,TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)]
y <- DGEList(counts=rawcounts2);
View(all_config)
View(all_rawcounts)
View(config)
#### Make new column with group name for graphing and modeling easier later:
config$GpF <- config$group
###matched FF PvM
#config$group <- as.factor(c("P","M", "M", "P", "M", "P", "P", "M", "P", "M", "P", "M", "M", "P", "P", "M"))
###rmoutliers July2020
#config$group <- as.factor(c(rep("ST", 39), rep("LT", 28)))
####rmoutliers Sept2020
config$group <- as.factor(c(rep("ST", 41), rep("LT", 28)))
config$group
config$GpF
config$col <- as.numeric(config$group)
head(config)
#### Read in the count data using the function readDGE from edgeR (already created by Emilee)
###note that I can use chris millers script with new config and load it here and run everything. So run it, save it as .Rdata and upload it here to have a new config and y object.
d = y
class(d)
dim(d) #make sure this matches the number of genes and number of samples
source('~/Desktop/emilee_STvsLT.R')
names(d)
d$samples
d$samples$group = config$group
d$samples$GpF = config$GpF
d$samples$col = config$col
apply(d$counts, 2, summary)
apply(d$counts, 2, max) / d$samples$lib.size
jpeg("Plots_QCandNorm/plotDensities_RawData.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotDensities(log2(d$counts + 0.1), group = d$samples$GpF, col = 1:4, legend = "topright" )
dev.off()
jpeg("Plots_QCandNorm/LibrarySizes_RawData.jpeg", width=7, height=7, units="in", res=300, quality=100)
barplot(colSums(d$counts) / 1e6, ylab = "Total Number of Reads (Million)", las = 2,
col = d$samples$col, main = "Library Sizes", cex.axis = 0.8 )
dev.off()
jpeg("Plots_QCandNorm/GenesWithZeroReadsVSLibZise.jpeg", width=7, height=7, units="in", res=300, quality=100)
plot(colSums(d$counts), colSums(d$counts == 0), pch = 16, col = d$samples$col)
dev.off()
sum(rowSums(d$counts) == 0)
hc.raw <- hclust(dist(t(log2(d$counts + 0.1))), method = "average")
jpeg("Plots_QCandNorm/HierCluster_RawData.jpeg", width=12, height=7, units="in", res=300, quality=100)
plot(hc.raw, hang = -1, main = "Hierarchical Cluster - Raw Values", sub = "", xlab = "", cex = 0.9)
dev.off()
jpeg("Plots_QCandNorm/Screeplot_RawData.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotPCA(log2(d$counts + 0.1), screeplot = T)
dev.off()
jpeg("Plots_QCandNorm/PCA_RawData.jpeg", width=15, height=15, units="in", res=300, quality=100)
plotPCA(log2(d$counts + 0.1), pch = 16, col = d$samples$col, groupnames = levels(
d$samples$group), addtext = d$samples$Sample, main = "PCA on Raw Counts", legend=(0))
dev.off()
jpeg("Plots_QCandNorm/TotalCountsperGene_log2scale.jpeg", width=7, height=7, units="in", res=300, quality=100)
hist(log2(rowSums(d$counts + 0.1)), 1000, main = "Total Counts per Gene, log2 scale")
dev.off()
d <- calcNormFactors(d)
d$samples
jpeg("Plots_QCandNorm/TMMNormFactors.jpeg", width=7, height=7, units="in", res=300, quality=100)
barplot(d$samples$norm.factors, col = d$samples$col, main = "TMM Normalization Factors",
names.arg = d$samples$Label, las = 2)
dev.off()
cpm.values <- cpm(d$counts)
head(cpm.values)
above1cpm <- rowSums(cpm.values  >= 1)
table(above1cpm)
jpeg("Plots_QCandNorm/Above1CPM.jpeg", width=7, height=7, units="in", res=300, quality=100)
hist(above1cpm, xlab = "Number of Samples with > 1 CPM", ylab = "Number of Genes")
dev.off()
sum(above1cpm >= 34) #change to half the half n(#samples)
sum(above1cpm >= 33) #22.5 is half the sample size in ST_PvM cohort
sum(above1cpm >= 34) / length(above1cpm)
# 0.4673685 --> This is the proportion of genes that pass the filtering
# 0.4689062 ##number for STvLT rmoutliers
# 0.4193453 ###number for ST_PvM
# 0.475413 ####number for PvM
# 0.4655055 for rm outliers july2020
# 0.4683443 for rm outliers Sept2020
sum(above1cpm >= 33) / length(above1cpm)
jpeg("Plots_QCandNorm/AllvsKeptvsFilteredGenes.jpeg", width=7, height=7, units="in", res=300, quality=100)
temp <- log2(rowSums(d$counts + 0.1))
layout(matrix( 1:3 , 3, 1 ))
hist(temp, 1000, main = "All Genes", xlim = c(0, 20))
hist(temp[above1cpm >= 12], 1000, main = "Kept Genes", xlim = c(0, 20))
hist(temp[above1cpm < 12], 1000, main = "Filtered Genes", xlim = c(0, 20))
dev.off()
d.filt <- d[above1cpm >= 34, , keep.lib.sizes = FALSE]
d.filt$samples$lib.size / d$samples$lib.size
nrow(d.filt) / nrow(d)
save.image("STvLT_rmoutliers_Sept2020.RData")
savehistory("STvLT_rmoutliers_Sept2020.Rhistory")
d.filt <- calcNormFactors(d.filt)
layout(1)
jpeg("Plots_QCandNorm/ActualLibSizes.jpeg", width=7, height=7, units="in", res=300, quality=100)
barplot( d.filt$samples$lib.size / 1e6, main = "Actual Library Sizes",
las = 2, names.arg = d$samples$Label, col = d$samples$col, ylab = "Millions of Reads",
cex.axis = 0.8 )
dev.off()
jpeg("Plots_QCandNorm/EffectiveLibSizes.jpeg", width=7, height=7, units="in", res=300, quality=100)
barplot( d.filt$samples$lib.size * d.filt$samples$norm.factors / 1e6, main = "Effective Library Sizes",
las = 2, names.arg = d$samples$Label, col = d$samples$col, ylab = "Millions of Reads",
cex.axis = 0.8 )
dev.off()
jpeg("Plots_QCandNorm/MDSplot.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotMDS(d.filt, main = "MDS plot", col = d.filt$samples$col, top = 1000 )
dev.off()
logCPM <- cpm(d.filt, log = T)
head(logCPM)
jpeg("Plots_QCandNorm/plotDensities_NormData.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotDensities(logCPM, group = d$samples$GpF, col = 1:4)
dev.off()
hc.edgeR <- hclust(dist(t(logCPM)), method = "average")
jpeg("Plots_QCandNorm/HierCluster_edgeRlogCPMValues.jpeg", width=12, height=7, units="in", res=300, quality=100)
plot(hc.edgeR, hang = -1, main = "Hierarchical Cluster - edgeR logCPM Values", sub = "", xlab =
"", cex = 0.9)
dev.off()
jpeg("Plots_QCandNorm/Screeplot_NormData.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotPCA(logCPM,screeplot=T)
dev.off()
jpeg("Plots_QCandNorm/PCA_NormData.jpeg", width=15, height=15, units="in", res=300, quality=100)
plotPCA(logCPM, pch = 16, col = d.filt$samples$col, groupnames = levels(d.filt$samples$group),
addtext = d.filt$samples$Sample, main = "PCA - edgeR logCPM", legend=(0))
dev.off()
save.image("STvLT_rmoutliers_Sept2020.RData")
savehistory("STvLT_rmoutliers_Sept2020.Rhistory")
options(stringsAsFactors = FALSE)
#had to install xcode on my Mac to download WGCNA
library(WGCNA)
library(affycoretools)
library(limma)
library(edgeR)
class(d.filt)
#### To analyze the RNA-Seq data using either the edgeR package or the limma package using voom values,
#### it is necessary to construct design and contrast matrices, which we can make using the limma package.
#### Create the design matrix with one coefficient (column) for each of the 2 groups (qq and QQ):
#d.filt
design <- model.matrix(~0 + d.filt$samples$group)
#design
colnames(design) <- levels(d.filt$samples$group)
rownames(design) <- d.filt$samples$Label
design
cont.matrix <- makeContrasts(STvsLT = ST - LT, levels=design)
cont.matrix
library(sva)
mod <- model.matrix(~d.filt$samples$group) # Full model
colnames(mod)[-1] <- paste0(levels(d.filt$samples$group)[-1], "vs", levels(d.filt$samples$group)[1])
head(mod)
mod0 <- model.matrix(~1, data=d.filt$samples$group) ## Null model
head(mod0)
cont.mod <- makeContrasts(STvsLT = STvsLT, levels = mod)
#cont.mod <- makeContrasts(PvsM = PvsM, levels = mod)
cont.mod
##SKIP
n.sv.eR <- num.sv(logCPM, mod)
n.sv.eR
svobj.eR <- sva(logCPM, mod,mod0, n.sv=n.sv.eR)
head(svobj.eR$sv)
##ploting batch effects from sva
for (i in 1:ncol(svobj.eR$sv)){
jpeg(filename = paste("Plots_SVA/SV", i, ".jpeg"), width=7, height=7, units="in", res=300, quality=100)
barplot(svobj.eR$sv[,i], col = d.filt$samples$col)
dev.off()
}
modSV <- model.matrix(~0 + d.filt$samples$group + svobj.eR$sv)
colnames(modSV)[1:2] <- c("ST", "LT")
####3:9...1:7 #rmoutliers Sept2020
rownames(modSV) <- d.filt$samples$Label
head(modSV)
cont.modSV <- makeContrasts(STvsLT = ST - LT, levels=modSV)
modSV <- model.matrix(~0 + d.filt$samples$group + svobj.eR$sv)
colnames(modSV)[1:2] <- c("ST", "LT")
colnames(modSV)[3:10] <- paste0("sv", 1:8) #adjust these numbers based on the number of variables (for STvLT analysis, the numbers were 3:10....1:8)
colnames(modSV)[3:9] <- paste0("sv", 1:7) #adjust these numbers based on the number of variables (for STvLT analysis, the numbers were 3:10....1:8)
####3:9...1:7 #rmoutliers Sept2020
rownames(modSV) <- d.filt$samples$Label
head(modSV)
cont.modSV <- makeContrasts(STvsLT = ST - LT, levels=modSV)
cont.modSV
d.filt.sv <- estimateGLMCommonDisp(d.filt, modSV, verbose = TRUE)
d.filt.sv <- estimateGLMTrendedDisp(d.filt.sv, modSV)
d.filt.sv <- estimateGLMTagwiseDisp(d.filt.sv, modSV)
jpeg("Plots_SVA/plotBCV.jpeg", width=7, height=7, units="in", res=300, quality=100)
plotBCV(d.filt.sv)
dev.off()
##fitting model
fit.edgeR.sv <- glmFit(d.filt.sv, modSV)
##calculates DE between STvLT, and between each variable from the batch effects
eR.STvsLT.sv <- glmLRT(fit.edgeR.sv, contrast = cont.modSV[ , 1]) #CHANGED eR.STvsLT.SV
eR.SV1.sv <- glmLRT(fit.edgeR.sv, coef = "sv1")
eR.SV2.sv <- glmLRT(fit.edgeR.sv, coef = "sv2")
eR.SV3.sv <- glmLRT(fit.edgeR.sv, coef = "sv3")
eR.SV4.sv <- glmLRT(fit.edgeR.sv, coef = "sv4")
eR.SV5.sv <- glmLRT(fit.edgeR.sv, coef = "sv5")
eR.SV6.sv <- glmLRT(fit.edgeR.sv, coef = "sv6")
eR.SV7.sv <- glmLRT(fit.edgeR.sv, coef = "sv7")
##combines results from variables into a frame
edgeR.coded.0.05FDR.sv <- new("TestResults", cbind(STvsLT = decideTestsDGE(eR.STvsLT.sv)[ , 1],
sv1 = decideTestsDGE(eR.SV1.sv)[ ,1],
sv2 = decideTestsDGE(eR.SV2.sv)[ ,1],
sv3 = decideTestsDGE(eR.SV3.sv)[ ,1],
sv4 = decideTestsDGE(eR.SV4.sv)[ ,1],
sv5 = decideTestsDGE(eR.SV5.sv)[ ,1],
sv6 = decideTestsDGE(eR.SV6.sv)[ ,1],
sv7 = decideTestsDGE(eR.SV7.sv)[ ,1],))
##combines results from variables into a frame
edgeR.coded.0.05FDR.sv <- new("TestResults", cbind(STvsLT = decideTestsDGE(eR.STvsLT.sv)[ , 1],
sv1 = decideTestsDGE(eR.SV1.sv)[ ,1],
sv2 = decideTestsDGE(eR.SV2.sv)[ ,1],
sv3 = decideTestsDGE(eR.SV3.sv)[ ,1],
sv4 = decideTestsDGE(eR.SV4.sv)[ ,1],
sv5 = decideTestsDGE(eR.SV5.sv)[ ,1],
sv6 = decideTestsDGE(eR.SV6.sv)[ ,1],
sv7 = decideTestsDGE(eR.SV7.sv)[ ,1]))
rownames(edgeR.coded.0.05FDR.sv) <- rownames(eR.STvsLT.sv$table)
#rownames(edgeR.coded.0.05FDR.sv) <- rownames(eR.PvsM.sv$table)
summary(edgeR.coded.0.05FDR.sv, p.value = 0.05)
summary(decideTestsDGE(eR.STvsLT.sv, p.value = 0.01))
summary(decideTestsDGE(eR.STvsLT.sv, p.value = 0.05))
summary(decideTestsDGE(eR.STvsLT.sv, p.value = 0.1))
eR.STvsLT.detailed.sv <- topTags(eR.STvsLT.sv, n = Inf, sort.by = "none")$table
###this object shows the log fold change
eR.STvsLT.detailed.sv$FC <- 2 ^ abs(eR.STvsLT.detailed.sv$logFC) *
sign(eR.STvsLT.detailed.sv$logFC)
hist(eR.STvsLT.sv$table$PValue, 1000)
hist(eR.STvsLT.detailed.sv$FDR, 1000)
hist(eR.STvsLT.detailed.sv$FDR, 1000, xlim = c(0,0.4), ylim=c(0,100))
edgeR.coded.0.01FDR.sv <- new("TestResults", cbind(STvsLT = decideTestsDGE(eR.STvsLT.sv, p.value = 0.01)[ , 1]))
rownames(edgeR.coded.0.01FDR.sv) <- rownames(eR.STvsLT.sv$table)
summary(edgeR.coded.0.01FDR.sv)
##the following was added June 2020, to see DEGs of FDR <0.1.
edgeR.coded.0.1FDR.sv <- new("TestResults", cbind(STvsLT = decideTestsDGE(eR.STvsLT.sv, p.value = 0.1)[ , 1]))
rownames(edgeR.coded.0.1FDR.sv) <- rownames(eR.STvsLT.sv$table)
summary(edgeR.coded.0.1FDR.sv)
#####????????????????DO THESE NUMBERS NEED TO BE ADJUSTED
sva.rm.eR <- removeBatchEffect(logCPM, design = design, covariates = modSV[,3:9]) #ran this one again for P_STvLT, not sure if needs to be adjusted differently
jpeg("Plots_SVA/PCA_edgeRlogCPM_noSV.jpeg", width=15, height=15, units="in", res=300, quality=100)
plotPCA(sva.rm.eR, pch = 16, col = d.filt.sv$samples$col, groupnames = levels(d.filt.sv$samples$group),
addtext = d.filt.sv$samples$Sample, main = "PCA - PvsM")
dev.off()
write.csv(eR.STvsLT.detailed.sv, file = "RNASeq_STvsLT_FDR_batchCorrected_results.csv")
save.image("STvLT_rmoutliers_Sept2020.RData")
savehistory("STvLT_rmoutliers_Sept2020.Rhistory")
sessionInfo()
options(stringsAsFactors = FALSE)
library(WGCNA)
library(affycoretools)
library(limma)
library(edgeR)
head(d.filt.sv$samples)
head(modSV)
cont.modSV
summary(edgeR.coded.0.01FDR.sv)
summary(edgeR.coded.0.05FDR.sv)
summary(edgeR.coded.0.1FDR.sv) #added June 2020
sum(eR.STvsLT.detailed.sv$FDR < 0.01)
sum(eR.STvsLT.detailed.sv$FDR < 0.05)
sum(eR.STvsLT.detailed.sv$FDR < 0.1) ##added June 2020
topTags(eR.STvsLT.sv)
G.all.0.01FDR <- rownames(edgeR.coded.0.01FDR.sv)[edgeR.coded.0.01FDR.sv[,1] !=0]
length(G.all.0.01FDR)
G.all.0.05FDR <- rownames(edgeR.coded.0.05FDR.sv)[edgeR.coded.0.05FDR.sv[,1] !=0]
length(G.all.0.05FDR)
#added June 2020
G.all.0.1FDR <- rownames(edgeR.coded.0.1FDR.sv)[edgeR.coded.0.1FDR.sv[,1] !=0]
length(G.all.0.1FDR)
save.image("STvsLT_rmoutliers_Sept2020.RData")
savehistory("STvsLT_rmoutliers_Sept2020.Rhistory")
